
## Автоматизация присвоения версии скрипту

Данный скрипт version.sh предназначен для автоматизации процесса увеличения версии проекта и обновления информации о последнем коммите и дате в файлах README.md для GitHub и version.sh в корневой папке вашего проекта. Он выполняет следующие действия:

1. Получает номер последнего коммита в репозитории при помощи команды git rev-parse.
2. Получает текущую дату и время.
3. Получает текущую версию проекта из файла version.sh при помощи команды grep и sed.
4. Увеличивает номер версии проекта при помощи команды awk.
5. Обновляет номер версии проекта в файле version.sh при помощи команды sed.
6. Обновляет номер версии проекта в файле README.md при помощи команды sed.
7. Обновляет информацию о последнем коммите и дате в файле version.sh при помощи команды sed.
8. Обновляет информацию о последнем коммите и дате в файле README.md при помощи команды sed.
9. Завершает работу скрипта.

Таким образом, данный скрипт позволяет автоматически обновлять информацию о версии проекта и последнем коммите в файле README.md и version.sh при каждом коммите в репозиторий.

В файле README.md должно быть начальное значение версии в виде строки version: X.Y.Z, где X, Y и Z - цифры, соответствующие мажорной, минорной и патч-версиям соответственно. 
Например: Version 0.1.0

Для использования файла VERSION в скрипте контроля версий нужно создать файл VERSION в корневом каталоге вашего проекта, если его еще нет. Файл VERSION должен содержать начальную версию вашего проекта, например, в формате X.Y.Z, где X, Y, Z - числа. Например, начальная версия вашего проекта может быть 0.1.0. Вы можете создать файл VERSION с помощью следующей команды в терминале: 
$ echo "0.1.0" > VERSION

Файл VERSION в корневом каталоге можно сделать и пустым, так как скрипт будет искать и обновлять номер версии в файле version.sh.

Чтобы скрипт контроля версий version.sh мог читать файл VERSION, необходимо дать ему соответствующие права на чтение.
Вы можете сделать это с помощью следующей команды: 
$ chmod +r VERSION 

Затем создайте простой скрипт контроля версий version.sh для этого нужно:

1. Открыть терминал.
2. Перейти в корневую директорию проекта.
3. Создать новый файл "version.sh" с помощью команды: $ touch version.sh
4. Назначить права на выполнение созданному файлу с помощью команды: $ chmod +x version.sh
5. Открыть созданный файл для редактирования с помощью команды: $ nano version.sh 
6. Вставить в созданный файл скрипт:

#!/bin/bash

# --> Получаем номер последнего коммита
    LAST_COMMIT=$(git rev-parse --short HEAD)

# --> Получаем текущую дату
    DATE=$(date '+%Y-%m-%d %H:%M:%S')

# --> Получаем текущую версию
    VERSION=$(grep 'VERSION=' version.sh | sed 's/VERSION=//')

# --> Увеличиваем номер версии
    VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=. )

# --> Обновляем номер версии в скрипте
    sed -i '' "s/VERSION=.*/VERSION=$VERSION/" version.sh

# --> Обновляем номер версии в README.md
    sed -i '' "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/" README.md

# --> Обновляем номер коммита и дату в version.sh
    sed -i '' "1i\
# Version $VERSION, last commit: $LAST_COMMIT, $DATE" version.sh

# --> Обновляем номер коммита и дату в README.md
    sed -i '' "s/last commit: [0-9a-f]\+/last commit: $LAST_COMMIT, $DATE/" README.md

    exit 0

В этом скрипте номер версии обновляется только в последней цифре, т.е. если текущая версия была 0.1.0, то после запуска скрипта перед коммитом она обновится до 0.1.1. Допустим, исходная версия была 0.1.0. После выполнения скрипта version.sh при следующем коммите, версия будет увеличена до 0.1.1. Если скрипт version.sh будет запущен еще раз перед следующим коммитом, то версия будет увеличена до 0.1.2, и т.д.

Если вы хотите увеличить версию до 0.2.0, то вам нужно будет вручную обновить ее в скрипте version.sh. Для этого откройте файл version.sh в любом текстовом редакторе и замените строку VERSION=0.1.0 на VERSION=0.2.0. После этого, когда вы запустите скрипт перед очередным коммитом, версия будет обновлена до 0.2.0 в файле version.sh, в файле README.md и в файле VERSION в корневой директории вашего проекта.

Чтобы команда sed успешно обновила номер коммита и дату в файле README.md, в этом файле изначально должно быть определенное строковое значение, которое затем заменяется на результат выполнения скрипта. В данном случае, это строка должна содержать текст last commit: и номер коммита, например две эти строки:

Version 0.1.0
Last commit: abc1234, 2023-03-15 10:30:00

Здесь abc1234 - это номер последнего коммита, а 2023-03-15 10:30:00 - это дата и время его создания. Эта строка должна быть уникальной в файле, чтобы команда sed могла ее правильно найти и заменить.

Теперь нужно создать и настроить хук на выполнение скрита обновления версий version.sh.
Для этого нужно выполнить следующие шаги:

1. Открыть терминал.
2. Перейти в корневую директорию проекта, где находится папка ".git".
3. Создать новый файл "push-commit" в папке ".git/hooks" с помощью команды touch .git/hooks/push-commit.
4. Назначить права на выполнение созданному файлу с помощью команды chmod +x .git/hooks/push-commit.
5. Открыть созданный файл для редактирования с помощью команды: nano .git/hooks/push-commit. 
6. Вставить в созданный файл скрипт:

#!/bin/bash
/path/to/project/you_project/version.sh

Примечание: 
1. В шаге 6 вы должны заменить "/path/to/project/you_project/version.sh" на полный путь к файлу скрипта обновления версий в вашем проекте.
2. Так-же Важно помнить, что при создании хука в папке ".git/hooks" файлы хуков могут быть перезаписаны при обновлении Git, поэтому не забудьте сохранить копию файла хука в безопасном месте, если вы вносите в него какие-либо изменения.

Сохранить файл и закрыть редактор nano.
После выполнения всех предыдущих шагов, Git будет автоматически запускать хук, при попытке создания коммита в вашем редакторе кода поддерживающего работу с коммитами GitHub, и скрипт version.sh контроля версий будет работать.




































Существует несколько распространенных схем маркировки версий, которые используются различными компаниями и проектами.Вот некоторые из них:

Мажорная.Минорная.Патч-версия: эта схема использует три числа, разделенные точками. Первое число обозначает мажорную версию, второе - минорную версию, а третье - патч-версию. Мажорная версия обычно увеличивается, когда в продукт вносятся крупные изменения, которые могут нарушить обратную совместимость с предыдущими версиями. Минорная версия обычно увеличивается, когда в продукт добавляют новые функции или улучшения, которые не нарушают обратную совместимость. Патч-версия обычно увеличивается, когда в продукт вносятся исправления ошибок.

Год.Месяц.Патч-версия: в этой схеме версия состоит из года выпуска, месяца выпуска и патч-версии. Например, версия 21.03.1 обозначает, что продукт был выпущен в марте 2021 года и имеет первую патч-версию.

Дата выпуска: в этой схеме версия состоит из даты выпуска продукта в формате ГГГГММДД. Например, версия 20210313 обозначает, что продукт был выпущен 13 марта 2021 года.

Случайные числа или буквы: в этой схеме версии присваиваются случайные числа или буквы без какого-либо определенного порядка. Эта схема наиболее распространена для версий продуктов в ранней стадии разработки или для внутреннего использования в компании.

Выбор схемы маркировки версий зависит от предпочтений компании и типа продукта. Некоторые продукты могут использовать несколько схем версионирования в разное время, чтобы отразить изменения в способе разработки и публикации. Например, начальные версии продукта могут использовать схему случайных чисел или букв, чтобы отразить неопределенность и нестабильность в разработке, а когда продукт станет более стабильным, можно перейти на более устойчивую схему мажорной.минорной.патч-версии.

Кроме того, некоторые компании используют дополнительные метки, такие как альфа (альфа-версия), бета (бета-версия) и релиз-кандидат (версия, которая считается готовой к выпуску, но может требовать дополнительного тестирования). Эти метки могут указывать на стадию разработки продукта и помочь пользователям определить, насколько стабильной является версия.

Независимо от выбранной схемы, важно придерживаться ее и обеспечивать последовательность присвоения версий. Это позволяет пользователям легко определить, какая версия продукта имеет больше функций, какие ошибки были исправлены и т.д. Версионирование является важным элементом процесса разработки программных продуктов и помогает упростить управление и поддержку продукта.

