
## Автоматизация присвоения версии скрипту

Данный скрипт version.sh предназначен для автоматизации процесса увеличения версии проекта и обновления информации о последнем коммите и дате в файлах README.md для GitHub и version.sh в корневой папке вашего проекта. Он выполняет следующие действия:

1. Получает номер последнего коммита в репозитории при помощи команды git rev-parse.
2. Получает текущую дату и время.
3. Получает текущую версию проекта из файла version.sh при помощи команды grep и sed.
4. Увеличивает номер версии проекта при помощи команды awk.
5. Обновляет номер версии проекта в файле version.sh при помощи команды sed.
6. Обновляет номер версии проекта в файле README.md при помощи команды sed.
7. Обновляет информацию о последнем коммите и дате в файле version.sh при помощи команды sed.
8. Обновляет информацию о последнем коммите и дате в файле README.md при помощи команды sed.
9. Завершает работу скрипта.

Таким образом, данный скрипт позволяет автоматически обновлять информацию о версии проекта и последнем коммите в файле README.md и version.sh при каждом коммите в репозиторий.

В файле README.md должно быть начальное значение версии в виде строки version: X.Y.Z, где X, Y и Z - цифры, соответствующие мажорной, минорной и патч-версиям соответственно. 
Например: Version 0.1.0

Для использования файла VERSION в скрипте контроля версий нужно создать файл VERSION в корневом каталоге вашего проекта, если его еще нет. Файл VERSION должен содержать начальную версию вашего проекта, например, в формате X.Y.Z, где X, Y, Z - числа. Например, начальная версия вашего проекта может быть 0.1.0. Вы можете создать файл VERSION с помощью следующей команды в терминале: 
$ echo "0.1.0" > VERSION

Файл VERSION в корневом каталоге можно сделать и пустым, так как скрипт будет искать и обновлять номер версии в файле version.sh.

Чтобы скрипт контроля версий version.sh мог читать файл VERSION, необходимо дать ему соответствующие права на чтение.
Вы можете сделать это с помощью следующей команды: 
$ chmod +r VERSION 

Затем создайте простой скрипт контроля версий version.sh для этого нужно:

1. Открыть терминал.
2. Перейти в корневую директорию проекта.
3. Создать новый файл "version.sh" с помощью команды: $ touch version.sh
4. Назначить права на выполнение созданному файлу с помощью команды: $ chmod +x version.sh
5. Открыть созданный файл для редактирования с помощью команды: $ nano version.sh 
6. Вставить в созданный файл скрипт:

#!/bin/bash

# --> Получаем номер последнего коммита
    LAST_COMMIT=$(git rev-parse --short HEAD)

# --> Получаем текущую дату
    DATE=$(date '+%Y-%m-%d %H:%M:%S')

# --> Получаем текущую версию
    VERSION=$(grep 'VERSION=' version.sh | sed 's/VERSION=//')

# --> Увеличиваем номер версии
    VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=. )

# --> Обновляем номер версии в скрипте
    sed -i '' "s/VERSION=.*/VERSION=$VERSION/" version.sh

# --> Обновляем номер версии в README.md
    sed -i '' "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/" README.md

# --> Обновляем номер коммита и дату в version.sh
    sed -i '' "1i\
# Version $VERSION, last commit: $LAST_COMMIT, $DATE" version.sh

# --> Обновляем номер коммита и дату в README.md
    sed -i '' "s/last commit: [0-9a-f]\+/last commit: $LAST_COMMIT, $DATE/" README.md

    exit 0

В этом скрипте номер версии обновляется только в последней цифре, т.е. если текущая версия была 0.1.0, то после запуска скрипта перед коммитом она обновится до 0.1.1. Допустим, исходная версия была 0.1.0. После выполнения скрипта version.sh при следующем коммите, версия будет увеличена до 0.1.1. Если скрипт version.sh будет запущен еще раз перед следующим коммитом, то версия будет увеличена до 0.1.2, и т.д.

Если вы хотите увеличить версию до 0.2.0, то вам нужно будет вручную обновить ее в скрипте version.sh. Для этого откройте файл version.sh в любом текстовом редакторе и замените строку VERSION=0.1.0 на VERSION=0.2.0. После этого, когда вы запустите скрипт перед очередным коммитом, версия будет обновлена до 0.2.0 в файле version.sh, в файле README.md и в файле VERSION в корневой директории вашего проекта.

Чтобы команда sed успешно обновила номер коммита и дату в файле README.md, в этом файле изначально должно быть определенное строковое значение, которое затем заменяется на результат выполнения скрипта. В данном случае, это строка должна содержать текст last commit: и номер коммита, например две эти строки:

```Version 0.1.0
Last commit: abc1234, 2023-03-15 10:30:00```

Здесь abc1234 - это номер последнего коммита, а 2023-03-15 10:30:00 - это дата и время его создания. Эта строка должна быть уникальной в файле, чтобы команда sed могла ее правильно найти и заменить.

Теперь нужно создать и настроить хук на выполнение скрита обновления версий version.sh.
Для этого нужно выполнить следующие шаги:

1. Открыть терминал.
2. Перейти в корневую директорию проекта, где находится папка ".git".
3. Создать новый файл "push-commit" в папке ".git/hooks" с помощью команды touch .git/hooks/push-commit.
4. Назначить права на выполнение созданному файлу с помощью команды chmod +x .git/hooks/push-commit.
5. Открыть созданный файл для редактирования с помощью команды: nano .git/hooks/push-commit. 
6. Вставить в созданный файл скрипт:

#!/bin/bash
/path/to/project/you_project/version.sh

Примечание: 
1. В шаге 6 вы должны заменить "/path/to/project/you_project/version.sh" на полный путь к файлу скрипта обновления версий в вашем проекте.
2. Так-же Важно помнить, что при создании хука в папке ".git/hooks" файлы хуков могут быть перезаписаны при обновлении Git, поэтому не забудьте сохранить копию файла хука в безопасном месте, если вы вносите в него какие-либо изменения.

Сохранить файл и закрыть редактор nano.
После выполнения всех предыдущих шагов, Git будет автоматически запускать хук, при попытке создания коммита в вашем редакторе кода поддерживающего работу с коммитами GitHub, и скрипт version.sh контроля версий будет работать.




































Существует несколько распространенных схем маркировки версий, которые используются различными компаниями и проектами.Вот некоторые из них:

Мажорная.Минорная.Патч-версия: эта схема использует три числа, разделенные точками. Первое число обозначает мажорную версию, второе - минорную версию, а третье - патч-версию. Мажорная версия обычно увеличивается, когда в продукт вносятся крупные изменения, которые могут нарушить обратную совместимость с предыдущими версиями. Минорная версия обычно увеличивается, когда в продукт добавляют новые функции или улучшения, которые не нарушают обратную совместимость. Патч-версия обычно увеличивается, когда в продукт вносятся исправления ошибок.

Год.Месяц.Патч-версия: в этой схеме версия состоит из года выпуска, месяца выпуска и патч-версии. Например, версия 21.03.1 обозначает, что продукт был выпущен в марте 2021 года и имеет первую патч-версию.

Дата выпуска: в этой схеме версия состоит из даты выпуска продукта в формате ГГГГММДД. Например, версия 20210313 обозначает, что продукт был выпущен 13 марта 2021 года.

Случайные числа или буквы: в этой схеме версии присваиваются случайные числа или буквы без какого-либо определенного порядка. Эта схема наиболее распространена для версий продуктов в ранней стадии разработки или для внутреннего использования в компании.

Выбор схемы маркировки версий зависит от предпочтений компании и типа продукта. Некоторые продукты могут использовать несколько схем версионирования в разное время, чтобы отразить изменения в способе разработки и публикации. Например, начальные версии продукта могут использовать схему случайных чисел или букв, чтобы отразить неопределенность и нестабильность в разработке, а когда продукт станет более стабильным, можно перейти на более устойчивую схему мажорной.минорной.патч-версии.

Кроме того, некоторые компании используют дополнительные метки, такие как альфа (альфа-версия), бета (бета-версия) и релиз-кандидат (версия, которая считается готовой к выпуску, но может требовать дополнительного тестирования). Эти метки могут указывать на стадию разработки продукта и помочь пользователям определить, насколько стабильной является версия.

Независимо от выбранной схемы, важно придерживаться ее и обеспечивать последовательность присвоения версий. Это позволяет пользователям легко определить, какая версия продукта имеет больше функций, какие ошибки были исправлены и т.д. Версионирование является важным элементом процесса разработки программных продуктов и помогает упростить управление и поддержку продукта.



Шаг 2: Добавьте version.sh в Git и сделайте его исполняемым

Добавьте version.sh в Git и сделайте его исполняемым с помощью следующих команд:

bash
Copy code


Шаг 3: Настройте хук на выполнение version.sh

Настраиваем хук на выполнение version.sh при каждом коммите с помощью следующих команд:

bash
Copy code
$ cd .git/hooks
$ touch push-commit
$ chmod +x push-commit
Добавляем в файл push-commit следующий код:

bash
Copy code
#!/bin/bash
./version.sh
git add .
Этот хук вызывает скрипт version.sh при каждом коммите и добавляет результат выполнения команды git add ., чтобы сохранить изменения в Git.

Шаг 4: Проверьте работу скрипта

После выполнения всех предыдущих шагов, Git будет автоматически запускать version.sh при каждом коммите. Для проверки правильной работы скрипта введите следующую команду в терминале:

bash
Copy code
$ git commit -m "Test commit"
Вывод скрипта должен быть включен в коммит, и вы можете проверить его, введя следующую команду:

bash
Copy code
$ git log
Это должно показать сообщение о коммите, в котором будет указан номер версии.

Теперь у вас есть автоматизированная схема присвоения версии вашему скрипту для GitHub, которая будет выполняться при каждом коммите.


Это все? Или еще что-то важно знать об этом для более простого исполнения твоей инструкции?
Да, в принципе, это все шаги, необходимые для автоматизации присвоения версии скрипту для GitHub. Однако, есть несколько вещей, которые стоит учитывать:

Если вы используете какую-то другую систему контроля версий, то вам могут понадобиться некоторые дополнительные шаги для настройки автоматизации.

Ваш скрипт должен быть совместим с Git и сможет работать на всех системах, на которых вы планируете его использовать.

Не забудьте добавить в файл README.md информацию о том, как работает автоматизация присвоения версии вашему скрипту, чтобы другие разработчики могли легко воспользоваться этим.

Некоторые разработчики предпочитают использовать автоматизированные средства для управления версиями, такие как GitVersion или Semantic Versioning, вместо создания своих собственных скриптов. В этом случае необходимо следовать инструкциям для выбранного инструмента.

Надеюсь, что эта инструкция поможет вам автоматизировать присвоение версии вашему скрипту для GitHub и упростит вашу работу в разработке программного обеспечения.


Хорошо, тогда напиши инструкцию которую нужно добавить в файл README.md информацию о том, как работает автоматизация присвоения версии вашему скрипту, чтобы другие разработчики могли легко воспользоваться этим.
Конечно, вот инструкция, которую вы можете добавить в файл README.md вашего репозитория:

Автоматизация присвоения версии скрипту
Для автоматизации присвоения версии вашему скрипту используется следующий подход:

Используйте Git для хранения вашего кода и контроля версий.

Добавьте скрипт version.sh в ваш репозиторий и установите ему права на выполнение:

shell
Copy code
$ chmod +x version.sh
Измените ваш скрипт таким образом, чтобы он считывал версию из файла VERSION:

bash
Copy code
#!/bin/bash
VERSION=$(cat VERSION)
echo "Running script version $VERSION"
# your script code here
Создайте файл VERSION в корневой директории вашего репозитория и запишите в него начальную версию вашего скрипта:

Copy code
1.0.0
Используйте скрипт version.sh для обновления версии вашего скрипта. Каждый раз, когда вы готовы выпустить новую версию, запустите скрипт следующим образом:

shell
Copy code
$ ./version.sh patch # для изменения патч-версии (например, 1.0.0 -> 1.0.1)
$ ./version.sh minor # для изменения минорной версии (например, 1.0.0 -> 1.1.0)
$ ./version.sh major # для изменения мажорной версии (например, 1.0.0 -> 2.0.0)
Сохраните изменения, сделанные в вашем скрипте, и закоммитьте их в Git, указав новую версию в сообщении коммита.

Опубликуйте новую версию вашего скрипта в соответствующем формате, указав версию в названии файла, чтобы другие разработчики могли легко найти и использовать вашу новую версию.

Надеюсь, эта инструкция поможет другим разработчикам легко использовать автоматизацию присвоения версии вашему скрипту.



Как настроить хук на выполнение version.sh при каждом коммите в GitHub Desktop на macos?
Вы можете настроить хук для выполнения version.sh при каждом коммите в GitHub Desktop на macOS, следуя этим шагам:

Откройте GitHub Desktop и перейдите в репозиторий, в котором вы хотите настроить хук.

Нажмите на меню "Repository" в верхней части экрана и выберите "Open in Terminal".

В терминале перейдите в корневую директорию вашего репозитория:

shell
Copy code
$ cd /path/to/repository
Создайте каталог .git/hooks, если его нет:

shell
Copy code
$ mkdir -p .git/hooks
Создайте скрипт-хук post-commit в каталоге .git/hooks с помощью любого текстового редактора, например, nano:

shell
Copy code
$ nano .git/hooks/post-commit
Добавьте следующий скрипт в файл post-commit:

bash
Copy code
#!/bin/bash
/path/to/version.sh
Замените /path/to/version.sh на путь к вашему скрипту version.sh.

Сохраните и закройте файл post-commit.

Сделайте файл post-commit исполняемым:

shell
Copy code
$ chmod +x .git/hooks/post-commit
Теперь каждый раз при коммите в ваш репозиторий будет выполняться скрипт version.sh.

Обратите внимание, что если вы работаете с командной строкой, вы также можете использовать инструкции, указанные в предыдущем ответе, чтобы автоматически обновлять версию скрипта при каждом коммите вместо использования хука.


Как теперь полученную версию добавить в README.md чтобы она автоматически обновлялась в этом файле?
Чтобы автоматически обновлять версию скрипта в файле README.md, вы можете использовать утилиту sed в вашем скрипте version.sh.

Вот инструкция по добавлению текущей версии скрипта в файл README.md:

Откройте файл version.sh.

После строки, которая устанавливает значение переменной VERSION, добавьте следующую строку:

bash
Copy code
sed -i '' "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: $VERSION/" README.md
Эта команда заменяет текущую версию в файле README.md на новую версию, которая была установлена в переменную VERSION.

Обратите внимание, что на macOS sed требует указания пустой строки после флага -i.

Сохраните и закройте файл version.sh.

Теперь при каждом запуске скрипта version.sh новая версия будет автоматически добавляться в файл README.md.


покажи скрипт целиком с этой строкой
Конечный вариант скрипта version.sh, который автоматически обновляет версию скрипта в файле README.md, может выглядеть примерно так:

bash
Copy code
#!/bin/bash

# Получаем текущую версию
VERSION=$(grep 'VERSION=' version.sh | sed 's/VERSION=//')

# Увеличиваем номер версии
VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=. )

# Обновляем номер версии в скрипте
sed -i '' "s/VERSION=.*/VERSION=$VERSION/" version.sh

# Обновляем номер версии в README.md
sed -i '' "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: $VERSION/" README.md
Обратите внимание, что вы должны заменить version.sh и README.md на соответствующие имена файлов в вашем проекте. Также убедитесь, что файл README.md содержит строку version: x.x.x, где x.x.x - текущая версия вашего скрипта. Если вы используете другую строку, измените соответствующий фрагмент в команде sed.



